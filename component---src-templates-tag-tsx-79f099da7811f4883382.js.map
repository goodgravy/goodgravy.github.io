{"version":3,"sources":["webpack:///./src/templates/tag.tsx","webpack:///./src/components/content-article.tsx","webpack:///./src/components/post-excerpt.tsx"],"names":["pageQuery","TagTemplate","data","tag","pageContext","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","keywords","className","map","node","frontmatter","fields","slug","key","ContentArticle","styled","article","StyledPostExcerpt","div","Thumbnail","thumbnail","staticThumbnail","StyledThumbnail","fluid","childImageSharp","StyledStaticThumbnail","src","thumbnailStyles","Img","img","PostExcerpt","excerpt","description","to","dangerouslySetInnerHTML","__html"],"mappings":"2FAAA,0HAyDaA,EAAY,aAoCVC,UA9EsB,SAAC,GAAwB,IAAvBC,EAAuB,EAAvBA,KAC9BC,EADqD,EAAjBC,YACpCD,IACDE,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQH,MAAOH,GACb,kBAAC,IAAD,CAAMG,MAAK,iBAAmBL,EAAnB,IAA2BS,SAAU,CAAC,OAAD,SAAmBT,EAAnB,2BAChD,kBAAC,IAAD,CAAgBU,UAAU,QACxB,4CAAkBV,GACjBM,EAAMK,KAAI,YAAY,IAAVC,EAAU,EAAVA,KACLP,EAAQO,EAAKC,YAAYR,OAASO,EAAKE,OAAOC,KACpD,OAAO,kBAAC,IAAD,CAAaC,IAAKJ,EAAKE,OAAOC,KAAMH,KAAMA,EAAMP,MAAOA,W,sVCzBjE,IAAMY,E,UAAiBC,EAAOC,QAAV,M,2dCsC3B,IAAMC,EAAoBF,IAAOG,IAAV,KAYjBC,EAAkC,SAAC,GAAiC,IAAhCC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,gBACnD,OAAID,EAAkB,kBAACE,EAAD,CAAiBC,MAAOH,EAAUI,gBAAgBD,QACpEF,EAAwB,kBAACI,EAAD,CAAuBC,IAAKL,IACjD,MAEHM,EAAkB,qHASlBL,EAAkBP,YAAOa,IAAPb,CAAH,IACjBY,GAEEF,EAAwBV,IAAOc,IAAV,IACvBF,GAgBWG,IAbiC,SAAC,GAA+B,IAA9BrB,EAA8B,EAA9BA,KAAMP,EAAwB,EAAxBA,MAChD6B,EADwE,EAAjBC,aAC9BvB,EAAKsB,QACpC,OACE,kBAACd,EAAD,KACE,kBAACE,EAAD,CAAWC,UAAWX,EAAKC,YAAYU,UAAWC,gBAAiBZ,EAAKC,YAAYW,kBACpF,4BACE,kBAAC,OAAD,CAAMY,GAAIxB,EAAKE,OAAOC,MAAOV,IAE/B,uBAAGgC,wBAAyB,CAACC,OAAQJ","file":"component---src-templates-tag-tsx-79f099da7811f4883382.js","sourcesContent":["import React from 'react'\nimport {graphql} from 'gatsby'\n\nimport {ContentArticle} from '../components/content-article'\nimport Head from '../components/head'\nimport Layout from '../components/layout'\nimport PostExcerpt from '../components/post-excerpt.tsx'\n\ninterface Props {\n  readonly data: PageQueryData\n  readonly pageContext: {\n    tag: string\n  }\n}\n\nconst TagTemplate: React.FC<Props> = ({data, pageContext}) => {\n  const {tag} = pageContext\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout title={siteTitle}>\n      <Head title={`Posts tagged \"${tag}\"`} keywords={[`blog`, `gatsby`, tag, `jmsbrdy`, `james brady`]} />\n      <ContentArticle className=\"body\">\n        <h1>Posts tagged {tag}</h1>\n        {posts.map(({node}) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return <PostExcerpt key={node.fields.slug} node={node} title={title} />\n        })}\n      </ContentArticle>\n    </Layout>\n  )\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    totalCount: number\n    edges: {\n      node: {\n        excerpt: string\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          date: string\n          title: string\n        }\n      }\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: {frontmatter: {published: {ne: false}, tags: {in: [$tag]}}}\n      sort: {fields: [frontmatter___date], order: DESC}\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 256) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            staticThumbnail\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default TagTemplate\n","import {styled} from '../styles/theme'\n\nexport const ContentArticle = styled.article`\n  margin-left: 13vw;\n  width: 560px;\n\n  @media (max-width: 760px) {\n    margin-left: 2vw;\n    margin-right: 2vw;\n    width: 94vw;\n    min-width: 300px;\n  }\n`\n","import React from 'react'\nimport {Link} from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport {styled} from '../styles/theme'\n\ninterface PostPreview {\n  readonly node: {\n    readonly excerpt: string\n    readonly fields: {\n      readonly slug: string\n    }\n    readonly frontmatter: {\n      readonly date: string\n      readonly title: string\n      readonly description: string\n      readonly thumbnail: {\n        readonly childImageSharp: {\n          fluid: any\n        }\n      }\n      readonly staticThumbnail: string\n    }\n  }\n}\n\ninterface PostExcerptProps {\n  title: string\n  PostPreview\n}\n\ninterface ThumbProps {\n  readonly thumbnail: {\n    readonly childImageSharp: {\n      fluid: any\n    }\n  }\n  readonly staticThumbnail: string\n}\n\nconst StyledPostExcerpt = styled.div`\n  margin-bottom: 3em;\n  overflow: auto;\n\n  h3 {\n    a,\n    a:visited {\n      color: hsl(230, 50%, 45%);\n    }\n  }\n`\n\nconst Thumbnail: React.FC<ThumbProps> = ({thumbnail, staticThumbnail}) => {\n  if (thumbnail) return <StyledThumbnail fluid={thumbnail.childImageSharp.fluid} />\n  if (staticThumbnail) return <StyledStaticThumbnail src={staticThumbnail} />\n  return null\n}\nconst thumbnailStyles = `\n  width: 256px;\n  float: right;\n  margin-left: 1em;\n\n  @media (max-width: 760px) {\n    width: 150px;\n  }\n`\nconst StyledThumbnail = styled(Img)`\n  ${thumbnailStyles}\n`\nconst StyledStaticThumbnail = styled.img`\n  ${thumbnailStyles}\n`\n\nconst PostExcerpt: React.FC<PostExcerptProps> = ({node, title, description}) => {\n  const excerpt = description || node.excerpt\n  return (\n    <StyledPostExcerpt>\n      <Thumbnail thumbnail={node.frontmatter.thumbnail} staticThumbnail={node.frontmatter.staticThumbnail} />\n      <h3>\n        <Link to={node.fields.slug}>{title}</Link>\n      </h3>\n      <p dangerouslySetInnerHTML={{__html: excerpt}} />\n    </StyledPostExcerpt>\n  )\n}\n\nexport default PostExcerpt\n"],"sourceRoot":""}