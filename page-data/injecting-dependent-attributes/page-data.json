{"componentChunkName":"component---src-templates-post-tsx","path":"/injecting-dependent-attributes/","result":{"data":{"site":{"siteMetadata":{"title":"jmsbrdy"}},"markdownRemark":{"id":"821c646a-a8fa-5658-bc00-0086d18b79a7","excerpt":"I was just writing some code which parses a URL in order to extract a piece of the path. When working correctly, the code under test takes a URL something like this: … and returns just the hash-like part of the path: . Creating factories to effectively test it was surprisingly fiddly! Here are the options I considered and what worked for me – in the hope it’s of some use to you.","html":"<p>I was just writing some code which parses a URL in order to extract a piece of the path.</p>\n<p>When working correctly, the code under test takes a URL something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">http://site.com/.well-known/pki-validation/4b1706977f59ffe3c1ddf282bbee6f45.txt</code></pre></div>\n<p>… and returns just the hash-like part of the path: <code class=\"language-text\">4b1706977f59ffe3c1ddf282bbee6f45</code>.</p>\n<p>Creating factories to effectively test it was surprisingly fiddly! Here are the options I considered and what worked for me – in the hope it’s of some use to you.</p>\n<!-- excerpt -->\n<h2 id=\"static-value\" style=\"position:relative;\"><a href=\"#static-value\" aria-label=\"static value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static value</h2>\n<p>The simplest approach would be to just use a static value for the URL in the factory:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">factory <span class=\"token symbol\">:response</span> <span class=\"token keyword\">do</span>\n  ssl_http_url <span class=\"token string\">\"http://site.com/.well-known/pki-validation/4b1706977f59ffe3c1ddf282bbee6f45.txt\"</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Then, in my tests I could do something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">expect<span class=\"token punctuation\">(</span>my_class<span class=\"token punctuation\">.</span>parse_response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to eq<span class=\"token punctuation\">(</span><span class=\"token string\">'4b1706977f59ffe3c1ddf282bbee6f45'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Pros</strong></p>\n<ul>\n<li>super simple</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>URL never changes: we’re not exercising the code as much as we might</li>\n<li>we need to look at the factory definition to know what the correct subpath is</li>\n</ul>\n<p>Overall, a weak but workable approach.</p>\n<h2 id=\"dynamic-value-sequence\" style=\"position:relative;\"><a href=\"#dynamic-value-sequence\" aria-label=\"dynamic value sequence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic value: sequence</h2>\n<p>To address these problems (kind-of), we could use a dynamic value with a sequence, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">factory <span class=\"token symbol\">:response</span> <span class=\"token keyword\">do</span>\nsequence<span class=\"token punctuation\">(</span><span class=\"token symbol\">:ssl_http_url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">|</span>n<span class=\"token operator\">|</span> <span class=\"token string\">\"http://site.com/.well-known/pki-validation/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>n<span class=\"token delimiter tag\">}</span></span>.txt\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This would generate URLs like so:</p>\n<ul>\n<li><code class=\"language-text\">http://site.com/.well-known/pki-validation/1.txt</code></li>\n<li><code class=\"language-text\">http://site.com/.well-known/pki-validation/2.txt</code></li>\n<li><code class=\"language-text\">http://site.com/.well-known/pki-validation/3.txt</code></li>\n<li>etc.</li>\n</ul>\n<p><strong>Pros</strong></p>\n<ul>\n<li>None</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>the generated URLs are unrealistic</li>\n<li>no way to <strong>reliably</strong> know what the subpath should be</li>\n</ul>\n<p>Overall, this is an even weaker approach than a static value. For the test code to know what subpath it should expect your code to produce, we have to rely on the incrementing sequence numbers. But what happens if you add a <code class=\"language-text\">before</code> block which creates a new <code class=\"language-text\">response</code>? All of a sudden all your expectations have off-by-one errors in their expectations.</p>\n<h2 id=\"dynamic-value-random-url\" style=\"position:relative;\"><a href=\"#dynamic-value-random-url\" aria-label=\"dynamic value random url permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic value: random URL</h2>\n<p>How about the factory randomly generates a URL of the right form?</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">factory <span class=\"token symbol\">:response</span> <span class=\"token keyword\">do</span>\n  ssl_http_url <span class=\"token string\">\"http://<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span> <span class=\"token constant\">Faker</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Internet</span><span class=\"token punctuation\">.</span>domain_name <span class=\"token delimiter tag\">}</span></span>/.well-known/pki-validation/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span> <span class=\"token constant\">Faker</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Crypto</span><span class=\"token punctuation\">.</span>md5 <span class=\"token delimiter tag\">}</span></span>.txt\"</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>This would generate URLs like so:</p>\n<ul>\n<li><code class=\"language-text\">http://gaylordmraz.io/.well-known/pki-validation/e8bfe6eda36585d2d18bb665096c16da.txt</code></li>\n<li><code class=\"language-text\">http://boyle.org/.well-known/pki-validation/16fe4249b256a74bc10144542b35ea5e.txt</code></li>\n<li><code class=\"language-text\">http://faheylakin.co/.well-known/pki-validation/7434184363b29d07dac7a11698bf86fe.txt</code></li>\n</ul>\n<p>They are realistic <em>and</em> they change, which means your code is better exercised.</p>\n<p>However, the problem now is that the test code doesn’t know what value to expect. Because the md5 hash which forms the subpath is random, we don’t know if the code under test is doing the right thing without reimplementing the parsing logic in the test itself!</p>\n<p>Implementing a shadow version of the production code logic just to test the production code is a nightmarish smell.</p>\n<h2 id=\"dynamic-value-injecting-a-value\" style=\"position:relative;\"><a href=\"#dynamic-value-injecting-a-value\" aria-label=\"dynamic value injecting a value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic value: injecting a value</h2>\n<p>What I really wanted was for the URL to be randomly generated, but for the test code to know what subpath value to expect.</p>\n<p>FactoryBot has a handy way of achieving this, but unfortunately it’s documented in a confusing manner.</p>\n<p><strong>Transient</strong> or <strong>ignored</strong> attributes are properties which you can set on your FactoryBot factories, but which don’t need to exist on the underlying class. They aren’t available for use on the generated objects either – they exist only in the scope of generating the object.</p>\n<p>The confusion comes in because they’re called ignored attributes in <a href=\"https://github.com/thoughtbot/factory_bot/blob/v4.4.0/GETTING_STARTED.md#transient-attributes\">version 4.4.0</a> but transient attributes in <a href=\"https://github.com/thoughtbot/factory_bot/blob/v4.5.0/GETTING_STARTED.md#transient-attributes\">version 4.5.0</a>, which breaks semver….</p>\n<p>However, with a factory defined like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">factory <span class=\"token symbol\">:response</span> <span class=\"token keyword\">do</span>\n  ssl_http_url <span class=\"token punctuation\">{</span> <span class=\"token string\">\"http://<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span> <span class=\"token constant\">Faker</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Internet</span><span class=\"token punctuation\">.</span>domain_name <span class=\"token delimiter tag\">}</span></span>/.well-known/pki-validation/<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>url_subpath<span class=\"token delimiter tag\">}</span></span>.txt\"</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\"># if you're using FactoryBot &lt; 4.5.0</span>\n  ignore <span class=\"token keyword\">do</span>\n    url_subpath <span class=\"token punctuation\">{</span> <span class=\"token constant\">Faker</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Crypto</span><span class=\"token punctuation\">.</span>md5 <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>You can pass in a value for <code class=\"language-text\">url_subpath</code> and test to your heart’s content, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">subpath <span class=\"token operator\">=</span> <span class=\"token constant\">Faker</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Crypto</span><span class=\"token punctuation\">.</span>md5\nresponse <span class=\"token operator\">=</span> <span class=\"token constant\">FG</span><span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token symbol\">:response</span><span class=\"token punctuation\">,</span> url_subpath<span class=\"token punctuation\">:</span> subpath<span class=\"token punctuation\">)</span>\nexpect<span class=\"token punctuation\">(</span>my_class<span class=\"token punctuation\">.</span>parse_response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to eq<span class=\"token punctuation\">(</span>subpath<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Pros</strong></p>\n<ul>\n<li>URLs are randomised</li>\n<li>generated URLs are realistic</li>\n<li>test code knows what subpath to expect</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>None</li>\n</ul>","frontmatter":{"title":"Injecting into transient FactoryBot attributes","description":null,"keywords":["tech","factorybot","testing","ruby"],"coverImage":null}}},"pageContext":{"slug":"/injecting-dependent-attributes/"}}}